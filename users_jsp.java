/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.18
 * Generated at: 2025-06-05 03:47:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;

public final class users_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/dbConnection.jsp", out, false);
      out.write('\n');
      out.write('\n');

    // Get database connection
    Connection conn = getConnection();
    initializeTables(conn);

    // Get all user tables and calculate order statistics
    List<Map<String, Object>> userTables = new ArrayList<>();
    
    try {
        PreparedStatement ps = conn.prepareStatement(
            "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name LIKE 'orders_%'");
        ResultSet rs = ps.executeQuery();
        
        while (rs.next()) {
            String tableName = rs.getString("table_name");
            String username = tableName.substring(7).replace("_", " ");
            
            try {
                PreparedStatement userPs = conn.prepareStatement(
                    "SELECT COUNT(*) as order_count, COALESCE(SUM(total_amount), 0) as total_spent, MAX(order_date) as last_order FROM " + tableName);
                ResultSet userRs = userPs.executeQuery();
                
                if (userRs.next()) {
                    Map<String, Object> userInfo = new HashMap<>();
                    userInfo.put("username", username);
                    userInfo.put("table_name", tableName);
                    userInfo.put("order_count", userRs.getInt("order_count"));
                    userInfo.put("total_spent", userRs.getDouble("total_spent"));
                    userInfo.put("last_order", userRs.getTimestamp("last_order"));
                    userTables.add(userInfo);
                }
                userRs.close();
                userPs.close();
            } catch (Exception e) {
                // Handle individual table errors
            }
        }
        rs.close();
        ps.close();
    } catch (Exception e) {
        // Handle error
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/adminLayout.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("Users", request.getCharacterEncoding()), out, false);
      out.write("\n");
      out.write("\n");
      out.write("<!-- Users Content -->\n");
      out.write("<div class=\"page-header\">\n");
      out.write("    <h1 class=\"page-title\">User Management</h1>\n");
      out.write("    <p class=\"page-subtitle\">Manage registered users and their order history</p>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"content-section\">\n");
      out.write("    <h2 class=\"section-title\">\n");
      out.write("        <i class=\"fas fa-users\"></i>\n");
      out.write("        Registered Users\n");
      out.write("    </h2>\n");
      out.write("    <div style=\"overflow-x: auto;\">\n");
      out.write("        <table class=\"admin-table\">\n");
      out.write("            <thead>\n");
      out.write("                <tr>\n");
      out.write("                    <th>User</th>\n");
      out.write("                    <th>Email</th>\n");
      out.write("                    <th>Orders</th>\n");
      out.write("                    <th>Total Spent</th>\n");
      out.write("                    <th>Last Order</th>\n");
      out.write("                    <th>Status</th>\n");
      out.write("                </tr>\n");
      out.write("            </thead>\n");
      out.write("            <tbody>\n");
      out.write("                ");

                    PreparedStatement userStmt = conn.prepareStatement("SELECT * FROM register ORDER BY created_at DESC");
                    ResultSet users = userStmt.executeQuery();
                    boolean hasUsers = false;
                    while (users.next()) {
                        hasUsers = true;
                        String userName = users.getString("name");
                        
                        // Find user's order data
                        Map<String, Object> userOrderData = null;
                        for (Map<String, Object> userTable : userTables) {
                            if (userName.equals(((String)userTable.get("username")).replace("_", " "))) {
                                userOrderData = userTable;
                                break;
                            }
                        }
                
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td>\n");
      out.write("                            <div style=\"display: flex; align-items: center;\">\n");
      out.write("                                <div class=\"user-avatar\">\n");
      out.write("                                    ");
      out.print( userName.substring(0, 1).toUpperCase() );
      out.write("\n");
      out.write("                                </div>\n");
      out.write("                                ");
      out.print( userName );
      out.write("\n");
      out.write("                            </div>\n");
      out.write("                        </td>\n");
      out.write("                        <td>");
      out.print( users.getString("email") != null ? users.getString("email") : "N/A" );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( userOrderData != null ? userOrderData.get("order_count") : 0 );
      out.write("</td>\n");
      out.write("                        <td>₹");
      out.print( userOrderData != null ? String.format("%.2f", (Double)userOrderData.get("total_spent")) : "0.00" );
      out.write("</td>\n");
      out.write("                        <td>\n");
      out.write("                            ");
 if (userOrderData != null && userOrderData.get("last_order") != null) { 
      out.write("\n");
      out.write("                                ");
      out.print( new java.text.SimpleDateFormat("MMM dd, yyyy").format((java.util.Date)userOrderData.get("last_order")) );
      out.write("\n");
      out.write("                            ");
 } else { 
      out.write("\n");
      out.write("                                No orders\n");
      out.write("                            ");
 } 
      out.write("\n");
      out.write("                        </td>\n");
      out.write("                        <td>\n");
      out.write("                            <span class=\"status-badge status-delivered\">\n");
      out.write("                                <i class=\"fas fa-check-circle\"></i>\n");
      out.write("                                Active\n");
      out.write("                            </span>\n");
      out.write("                        </td>\n");
      out.write("                    </tr>\n");
      out.write("                ");

                    }
                    if (!hasUsers) {
                
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td colspan=\"6\" style=\"text-align: center; color: #718096; padding: 40px;\">\n");
      out.write("                            <i class=\"fas fa-users\" style=\"font-size: 24px; margin-bottom: 8px; display: block;\"></i>\n");
      out.write("                            No users found\n");
      out.write("                        </td>\n");
      out.write("                    </tr>\n");
      out.write("                ");

                    }
                    users.close();
                    userStmt.close();
                
      out.write("\n");
      out.write("            </tbody>\n");
      out.write("        </table>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </main>\n");
      out.write("\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");

    conn.close();

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
