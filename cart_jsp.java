/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.18
 * Generated at: 2025-07-09 04:09:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import javax.servlet.http.*;

public final class cart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

    // SESSION & DB SETUP
    String username = (String) session.getAttribute("name");
    if (username == null) {
        username = "John Doe";  // default demo username
        session.setAttribute("username", username);
    }
    List<Integer> cart = (List<Integer>) session.getAttribute("cart");
    if (cart == null) {
        cart = new ArrayList<>();
        session.setAttribute("cart", cart);
    }

    // Handle view toggle
    String viewMode = request.getParameter("view");
    if (viewMode == null) {
        viewMode = "cart";
    }

    // Handle remove from cart
    String removeId = request.getParameter("remove_from_cart");
    if (removeId != null) {
        try {
            int pid = Integer.parseInt(removeId);
            cart.remove(Integer.valueOf(pid));
            session.setAttribute("cart", cart);
            response.sendRedirect("cart.jsp");
            return;
        } catch (NumberFormatException e) {
            // Ignore invalid ID
        }
    }

    // Handle quantity update
    String updateId = request.getParameter("update_quantity_id");
    String newQuantity = request.getParameter("new_quantity");
    if (updateId != null && newQuantity != null) {
        try {
            int pid = Integer.parseInt(updateId);
            int qty = Integer.parseInt(newQuantity);
            
            // Remove all instances of this product
            cart.removeAll(Collections.singleton(pid));
            
            // Add back the specified quantity
            for (int i = 0; i < qty && i < 10; i++) { // Max 10 items
                cart.add(pid);
            }
            
            session.setAttribute("cart", cart);
            response.sendRedirect("cart.jsp");
            return;
        } catch (NumberFormatException e) {
            // Ignore invalid input
        }
    }

    Class.forName("org.postgresql.Driver");
    Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/java", "postgres", "1234");
    
    // Create user-specific table name (sanitize username for table name)
    String sanitizedUsername = username.replaceAll("[^a-zA-Z0-9]", "_").toLowerCase();
    String userTableName = "orders_" + sanitizedUsername;
    
    // === CREATE USER-SPECIFIC ORDERS TABLE IF NOT EXISTS ===
    Statement initStmt = conn.createStatement();
    String createUserOrdersTable = "CREATE TABLE IF NOT EXISTS " + userTableName + " (" +
            "id SERIAL PRIMARY KEY," +
            "username VARCHAR(255) NOT NULL," +
            "full_name VARCHAR(255)," +
            "email VARCHAR(255)," +
            "phone VARCHAR(20)," +
            "address TEXT," +
            "city VARCHAR(100)," +
            "state VARCHAR(100)," +
            "pincode VARCHAR(10)," +
            "product_id INT NOT NULL," +
            "product_name VARCHAR(255) NOT NULL," +
            "product_image VARCHAR(500)," +
            "price NUMERIC(10,2) NOT NULL," +
            "quantity INT DEFAULT 1," +
            "payment_method VARCHAR(20) NOT NULL," +
            "payment_status VARCHAR(20) DEFAULT 'pending'," +
            "razorpay_payment_id VARCHAR(255)," +
            "razorpay_order_id VARCHAR(255)," +
            "order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP," +
            "status VARCHAR(50) DEFAULT 'pending'," +
            "tracking_number VARCHAR(100)," +
            "estimated_delivery DATE," +
            "total_amount NUMERIC(10,2) NOT NULL" +
            ")";
    initStmt.executeUpdate(createUserOrdersTable);
    initStmt.close();

    // Get user statistics from user-specific table
    int userTotalOrders = 0;
    double userTotalSpent = 0.0;
    try {
        PreparedStatement userStatsStmt = conn.prepareStatement(
            "SELECT COUNT(*) as total_orders, COALESCE(SUM(total_amount), 0) as total_spent FROM " + userTableName + " WHERE username = ?");
        userStatsStmt.setString(1, username);
        ResultSet statsRs = userStatsStmt.executeQuery();
        if (statsRs.next()) {
            userTotalOrders = statsRs.getInt("total_orders");
            userTotalSpent = statsRs.getDouble("total_spent");
        }
        statsRs.close();
        userStatsStmt.close();
    } catch (Exception e) {
        // Handle error silently - table might not exist yet
    }

    // Get user orders for tracking view
    List<Map<String, Object>> userOrders = new ArrayList<>();
    if ("orders".equals(viewMode)) {
        try {
            PreparedStatement ordersStmt = conn.prepareStatement(
                "SELECT * FROM " + userTableName + " WHERE username = ? ORDER BY order_date DESC");
            ordersStmt.setString(1, username);
            ResultSet ordersRs = ordersStmt.executeQuery();
            
            while (ordersRs.next()) {
                Map<String, Object> order = new HashMap<>();
                order.put("id", ordersRs.getInt("id"));
                order.put("product_name", ordersRs.getString("product_name"));
                order.put("price", ordersRs.getDouble("price"));
                order.put("quantity", ordersRs.getInt("quantity"));
                order.put("order_date", ordersRs.getTimestamp("order_date"));
                order.put("status", ordersRs.getString("status"));
                order.put("tracking_number", ordersRs.getString("tracking_number"));
                order.put("estimated_delivery", ordersRs.getDate("estimated_delivery"));
                order.put("product_image", ordersRs.getString("product_image"));
                order.put("total_amount", ordersRs.getDouble("total_amount"));
                order.put("payment_method", ordersRs.getString("payment_method"));
                order.put("payment_status", ordersRs.getString("payment_status"));
                userOrders.add(order);
            }
            ordersRs.close();
            ordersStmt.close();
        } catch (Exception e) {
            // Handle error silently - table might not exist yet
        }
    }

    // Display products in cart with quantities (for cart view)
    Map<Integer, Integer> productQuantities = new HashMap<>();
    for (Integer pid : cart) {
        productQuantities.put(pid, productQuantities.getOrDefault(pid, 0) + 1);
    }
    List<Map<String, Object>> cartProducts = new ArrayList<>();
    double totalAmount = 0.0;
    if (!productQuantities.isEmpty() && "cart".equals(viewMode)) {
        for (Map.Entry<Integer, Integer> entry : productQuantities.entrySet()) {
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM product WHERE id = ?");
            ps.setInt(1, entry.getKey());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Map<String, Object> product = new HashMap<>();
                product.put("id", rs.getInt("id"));
                product.put("name", rs.getString("name"));
                product.put("price", rs.getDouble("price"));
                product.put("image_url", rs.getString("image_url"));
                product.put("quantity", entry.getValue());
                cartProducts.add(product);
                totalAmount += rs.getDouble("price") * entry.getValue();
            }
            rs.close();
            ps.close();
        }
    }
    conn.close();

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>");
      out.print( "orders".equals(viewMode) ? "Order Tracking" : "Shopping Cart" );
      out.write(" - ShopHub</title>\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\n");
      out.write("    <style>\n");
      out.write("        * {\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("        body {\n");
      out.write("            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n");
      out.write("            background-color: #fafbfc;\n");
      out.write("            color: #2d3748;\n");
      out.write("            line-height: 1.6;\n");
      out.write("        }\n");
      out.write("        /* Header */\n");
      out.write("        .navbar {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            padding: 15px 0;\n");
      out.write("            position: fixed;\n");
      out.write("            top: 0;\n");
      out.write("            width: 100%;\n");
      out.write("            z-index: 1000;\n");
      out.write("            border-bottom: 1px solid rgba(45, 55, 72, 0.08);\n");
      out.write("            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n");
      out.write("        }\n");
      out.write("        .navbar-brand {\n");
      out.write("            color: #2d3748 !important;\n");
      out.write("            font-weight: 800;\n");
      out.write("            font-size: 24px;\n");
      out.write("            text-decoration: none;\n");
      out.write("            letter-spacing: -0.5px;\n");
      out.write("        }\n");
      out.write("        .nav-tools {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 20px;\n");
      out.write("        }\n");
      out.write("        .nav-item {\n");
      out.write("            color: #4a5568;\n");
      out.write("            text-decoration: none;\n");
      out.write("            font-size: 14px;\n");
      out.write("            font-weight: 500;\n");
      out.write("            position: relative;\n");
      out.write("            padding: 8px 0;\n");
      out.write("            transition: color 0.2s ease;\n");
      out.write("        }\n");
      out.write("        .nav-item:hover {\n");
      out.write("            color: #2d3748;\n");
      out.write("        }\n");
      out.write("        .nav-item.active {\n");
      out.write("            color: #ff6b35;\n");
      out.write("            font-weight: 600;\n");
      out.write("        }\n");
      out.write("        .nav-item i {\n");
      out.write("            font-size: 16px;\n");
      out.write("            margin-right: 6px;\n");
      out.write("        }\n");
      out.write("        .cart-count {\n");
      out.write("            background-color: #ff6b35;\n");
      out.write("            color: #ffffff;\n");
      out.write("            border-radius: 50%;\n");
      out.write("            padding: 1px 5px;\n");
      out.write("            font-size: 10px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            position: absolute;\n");
      out.write("            top: 0;\n");
      out.write("            right: -8px;\n");
      out.write("            min-width: 16px;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        /* View Toggle */\n");
      out.write("        .view-toggle {\n");
      out.write("            display: flex;\n");
      out.write("            background: #ffffff;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            padding: 6px;\n");
      out.write("            margin-bottom: 24px;\n");
      out.write("            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("        }\n");
      out.write("        .toggle-btn {\n");
      out.write("            flex: 1;\n");
      out.write("            padding: 12px 20px;\n");
      out.write("            text-align: center;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            text-decoration: none;\n");
      out.write("            color: #718096;\n");
      out.write("            font-weight: 500;\n");
      out.write("            transition: all 0.2s ease;\n");
      out.write("            border: none;\n");
      out.write("            background: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("        .toggle-btn.active {\n");
      out.write("            background-color: #ff6b35;\n");
      out.write("            color: #ffffff;\n");
      out.write("            box-shadow: 0 2px 4px rgba(255, 107, 53, 0.3);\n");
      out.write("        }\n");
      out.write("        .toggle-btn:hover:not(.active) {\n");
      out.write("            background-color: #f7fafc;\n");
      out.write("            color: #2d3748;\n");
      out.write("        }\n");
      out.write("        /* User Stats */\n");
      out.write("        .user-stats {\n");
      out.write("            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n");
      out.write("            color: white;\n");
      out.write("            padding: 20px;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            margin-bottom: 24px;\n");
      out.write("            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n");
      out.write("        }\n");
      out.write("        .user-stats h4 {\n");
      out.write("            margin-bottom: 16px;\n");
      out.write("            font-weight: 600;\n");
      out.write("        }\n");
      out.write("        .stats-grid {\n");
      out.write("            display: grid;\n");
      out.write("            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n");
      out.write("            gap: 16px;\n");
      out.write("        }\n");
      out.write("        .stat-item {\n");
      out.write("            text-align: center;\n");
      out.write("            padding: 12px;\n");
      out.write("            background: rgba(255, 255, 255, 0.1);\n");
      out.write("            border-radius: 8px;\n");
      out.write("            backdrop-filter: blur(10px);\n");
      out.write("        }\n");
      out.write("        .stat-number {\n");
      out.write("            font-size: 24px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            margin-bottom: 4px;\n");
      out.write("        }\n");
      out.write("        .stat-label {\n");
      out.write("            font-size: 12px;\n");
      out.write("            opacity: 0.9;\n");
      out.write("        }\n");
      out.write("        .table-info {\n");
      out.write("            background: rgba(255, 255, 255, 0.1);\n");
      out.write("            padding: 8px 12px;\n");
      out.write("            border-radius: 6px;\n");
      out.write("            font-size: 12px;\n");
      out.write("            margin-top: 12px;\n");
      out.write("            text-align: center;\n");
      out.write("            opacity: 0.8;\n");
      out.write("        }\n");
      out.write("        /* Main Content */\n");
      out.write("        .main-container {\n");
      out.write("            max-width: 1300px;\n");
      out.write("            margin: 0 auto;\n");
      out.write("            padding: 80px 20px 40px;\n");
      out.write("        }\n");
      out.write("        /* Page Header */\n");
      out.write("        .page-header {\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("        }\n");
      out.write("        .page-title {\n");
      out.write("            font-size: 32px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 8px;\n");
      out.write("            letter-spacing: -0.5px;\n");
      out.write("        }\n");
      out.write("        .breadcrumb {\n");
      out.write("            background: none;\n");
      out.write("            padding: 0;\n");
      out.write("            margin: 0;\n");
      out.write("            font-size: 14px;\n");
      out.write("        }\n");
      out.write("        .breadcrumb a {\n");
      out.write("            color: #718096;\n");
      out.write("            text-decoration: none;\n");
      out.write("        }\n");
      out.write("        .breadcrumb a:hover {\n");
      out.write("            color: #ff6b35;\n");
      out.write("        }\n");
      out.write("        .breadcrumb-item.active {\n");
      out.write("            color: #2d3748;\n");
      out.write("        }\n");
      out.write("        /* Orders Section */\n");
      out.write("        .orders-container {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            padding: 24px;\n");
      out.write("            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("        }\n");
      out.write("        .order-item {\n");
      out.write("            display: flex;\n");
      out.write("            padding: 24px 0;\n");
      out.write("            border-bottom: 1px solid #e2e8f0;\n");
      out.write("            align-items: flex-start;\n");
      out.write("            gap: 20px;\n");
      out.write("        }\n");
      out.write("        .order-item:last-child {\n");
      out.write("            border-bottom: none;\n");
      out.write("        }\n");
      out.write("        .order-image {\n");
      out.write("            width: 80px;\n");
      out.write("            height: 80px;\n");
      out.write("            object-fit: contain;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("            background-color: #f7fafc;\n");
      out.write("        }\n");
      out.write("        .order-details {\n");
      out.write("            flex: 1;\n");
      out.write("        }\n");
      out.write("        .order-product-name {\n");
      out.write("            font-size: 18px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 8px;\n");
      out.write("        }\n");
      out.write("        .order-meta {\n");
      out.write("            display: flex;\n");
      out.write("            flex-wrap: wrap;\n");
      out.write("            gap: 16px;\n");
      out.write("            margin-bottom: 12px;\n");
      out.write("            font-size: 14px;\n");
      out.write("            color: #718096;\n");
      out.write("        }\n");
      out.write("        .order-meta span {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 4px;\n");
      out.write("        }\n");
      out.write("        .order-price {\n");
      out.write("            font-size: 18px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 12px;\n");
      out.write("        }\n");
      out.write("        .order-status {\n");
      out.write("            display: inline-flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 6px;\n");
      out.write("            padding: 6px 12px;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            font-size: 12px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            text-transform: uppercase;\n");
      out.write("            letter-spacing: 0.5px;\n");
      out.write("        }\n");
      out.write("        .status-processing {\n");
      out.write("            background-color: #fef5e7;\n");
      out.write("            color: #d69e2e;\n");
      out.write("        }\n");
      out.write("        .status-confirmed {\n");
      out.write("            background-color: #e6fffa;\n");
      out.write("            color: #319795;\n");
      out.write("        }\n");
      out.write("        .status-shipped {\n");
      out.write("            background-color: #e6fffa;\n");
      out.write("            color: #319795;\n");
      out.write("        }\n");
      out.write("        .status-delivered {\n");
      out.write("            background-color: #f0fff4;\n");
      out.write("            color: #38a169;\n");
      out.write("        }\n");
      out.write("        .status-pending {\n");
      out.write("            background-color: #edf2f7;\n");
      out.write("            color: #718096;\n");
      out.write("        }\n");
      out.write("        .payment-info {\n");
      out.write("            display: inline-flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 6px;\n");
      out.write("            padding: 4px 8px;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            font-size: 11px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            text-transform: uppercase;\n");
      out.write("            letter-spacing: 0.5px;\n");
      out.write("            margin-left: 8px;\n");
      out.write("        }\n");
      out.write("        .payment-paid {\n");
      out.write("            background-color: #f0fff4;\n");
      out.write("            color: #38a169;\n");
      out.write("        }\n");
      out.write("        .payment-pending {\n");
      out.write("            background-color: #fef5e7;\n");
      out.write("            color: #d69e2e;\n");
      out.write("        }\n");
      out.write("        .tracking-section {\n");
      out.write("            background: #f7fafc;\n");
      out.write("            padding: 16px;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            margin-top: 12px;\n");
      out.write("        }\n");
      out.write("        .tracking-title {\n");
      out.write("            font-size: 14px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 8px;\n");
      out.write("        }\n");
      out.write("        .tracking-code {\n");
      out.write("            font-family: 'Courier New', monospace;\n");
      out.write("            font-size: 14px;\n");
      out.write("            color: #4a5568;\n");
      out.write("            margin-bottom: 8px;\n");
      out.write("        }\n");
      out.write("        .delivery-estimate {\n");
      out.write("            font-size: 14px;\n");
      out.write("            color: #718096;\n");
      out.write("        }\n");
      out.write("        /* Empty States */\n");
      out.write("        .empty-state {\n");
      out.write("            text-align: center;\n");
      out.write("            padding: 80px 20px;\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n");
      out.write("        }\n");
      out.write("        .empty-state i {\n");
      out.write("            font-size: 64px;\n");
      out.write("            color: #cbd5e0;\n");
      out.write("            margin-bottom: 24px;\n");
      out.write("        }\n");
      out.write("        .empty-state h3 {\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 12px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            font-size: 24px;\n");
      out.write("        }\n");
      out.write("        .empty-state p {\n");
      out.write("            color: #718096;\n");
      out.write("            margin-bottom: 32px;\n");
      out.write("            font-size: 16px;\n");
      out.write("            max-width: 400px;\n");
      out.write("            margin-left: auto;\n");
      out.write("            margin-right: auto;\n");
      out.write("        }\n");
      out.write("        /* Cart Layout */\n");
      out.write("        .cart-content {\n");
      out.write("            display: grid;\n");
      out.write("            grid-template-columns: 1fr 350px;\n");
      out.write("            gap: 30px;\n");
      out.write("            align-items: flex-start;\n");
      out.write("        }\n");
      out.write("        .cart-items {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            padding: 24px;\n");
      out.write("            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("        }\n");
      out.write("        .cart-summary {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            border-radius: 12px;\n");
      out.write("            padding: 24px;\n");
      out.write("            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("            position: sticky;\n");
      out.write("            top: 100px;\n");
      out.write("        }\n");
      out.write("        /* Cart Items */\n");
      out.write("        .cart-item {\n");
      out.write("            display: flex;\n");
      out.write("            padding: 24px 0;\n");
      out.write("            border-bottom: 1px solid #e2e8f0;\n");
      out.write("            align-items: flex-start;\n");
      out.write("            gap: 20px;\n");
      out.write("        }\n");
      out.write("        .cart-item:last-child {\n");
      out.write("            border-bottom: none;\n");
      out.write("        }\n");
      out.write("        .product-image {\n");
      out.write("            width: 120px;\n");
      out.write("            height: 120px;\n");
      out.write("            object-fit: contain;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("            background-color: #f7fafc;\n");
      out.write("        }\n");
      out.write("        .product-details {\n");
      out.write("            flex: 1;\n");
      out.write("        }\n");
      out.write("        .product-title {\n");
      out.write("            font-size: 18px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 8px;\n");
      out.write("            text-decoration: none;\n");
      out.write("            line-height: 1.4;\n");
      out.write("        }\n");
      out.write("        .product-title:hover {\n");
      out.write("            color: #ff6b35;\n");
      out.write("        }\n");
      out.write("        .product-price {\n");
      out.write("            font-size: 20px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 16px;\n");
      out.write("        }\n");
      out.write("        .product-price .currency {\n");
      out.write("            font-size: 16px;\n");
      out.write("        }\n");
      out.write("        .product-availability {\n");
      out.write("            color: #38a169;\n");
      out.write("            font-size: 14px;\n");
      out.write("            margin-bottom: 16px;\n");
      out.write("            font-weight: 500;\n");
      out.write("        }\n");
      out.write("        /* Quantity Controls */\n");
      out.write("        .quantity-controls {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 12px;\n");
      out.write("            margin-bottom: 12px;\n");
      out.write("        }\n");
      out.write("        .quantity-label {\n");
      out.write("            font-size: 14px;\n");
      out.write("            font-weight: 500;\n");
      out.write("            color: #4a5568;\n");
      out.write("        }\n");
      out.write("        .quantity-selector {\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("            border-radius: 6px;\n");
      out.write("            padding: 6px 12px;\n");
      out.write("            font-size: 14px;\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            color: #2d3748;\n");
      out.write("            min-width: 70px;\n");
      out.write("        }\n");
      out.write("        .quantity-selector:focus {\n");
      out.write("            outline: none;\n");
      out.write("            border-color: #ff6b35;\n");
      out.write("            box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.1);\n");
      out.write("        }\n");
      out.write("        /* Action Buttons */\n");
      out.write("        .item-actions {\n");
      out.write("            display: flex;\n");
      out.write("            gap: 12px;\n");
      out.write("        }\n");
      out.write("        .btn-remove {\n");
      out.write("            background: none;\n");
      out.write("            border: none;\n");
      out.write("            color: #e53e3e;\n");
      out.write("            font-size: 14px;\n");
      out.write("            font-weight: 500;\n");
      out.write("            padding: 6px 12px;\n");
      out.write("            border-radius: 6px;\n");
      out.write("            transition: all 0.2s ease;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("        .btn-remove:hover {\n");
      out.write("            background-color: #fed7d7;\n");
      out.write("            color: #c53030;\n");
      out.write("        }\n");
      out.write("        /* Summary Section */\n");
      out.write("        .summary-title {\n");
      out.write("            font-size: 20px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("        .summary-row {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            margin-bottom: 12px;\n");
      out.write("            font-size: 14px;\n");
      out.write("            color: #4a5568;\n");
      out.write("        }\n");
      out.write("        .summary-total {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            padding-top: 16px;\n");
      out.write("            border-top: 2px solid #e2e8f0;\n");
      out.write("            font-size: 20px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 24px;\n");
      out.write("        }\n");
      out.write("        /* Buttons */\n");
      out.write("        .btn-primary {\n");
      out.write("            background-color: #ff6b35;\n");
      out.write("            border: none;\n");
      out.write("            color: #ffffff;\n");
      out.write("            font-size: 16px;\n");
      out.write("            font-weight: 600;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            padding: 14px 24px;\n");
      out.write("            width: 100%;\n");
      out.write("            transition: all 0.2s ease;\n");
      out.write("            margin-bottom: 12px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            text-decoration: none;\n");
      out.write("            display: inline-block;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        .btn-primary:hover {\n");
      out.write("            background-color: #e55a2b;\n");
      out.write("            transform: translateY(-2px);\n");
      out.write("            box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);\n");
      out.write("            color: #ffffff;\n");
      out.write("        }\n");
      out.write("        .btn-secondary {\n");
      out.write("            background-color: #ffffff;\n");
      out.write("            border: 1px solid #e2e8f0;\n");
      out.write("            color: #4a5568;\n");
      out.write("            font-size: 14px;\n");
      out.write("            font-weight: 500;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            padding: 12px 20px;\n");
      out.write("            width: 100%;\n");
      out.write("            transition: all 0.2s ease;\n");
      out.write("            text-decoration: none;\n");
      out.write("            display: inline-block;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        .btn-secondary:hover {\n");
      out.write("            background-color: #f7fafc;\n");
      out.write("            border-color: #cbd5e0;\n");
      out.write("            color: #2d3748;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        /* Item Count */\n");
      out.write("        .item-count {\n");
      out.write("            font-size: 24px;\n");
      out.write("            font-weight: 700;\n");
      out.write("            color: #2d3748;\n");
      out.write("            margin-bottom: 24px;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        /* Responsive Design */\n");
      out.write("        @media (max-width: 768px) {\n");
      out.write("            .cart-content {\n");
      out.write("                grid-template-columns: 1fr;\n");
      out.write("                gap: 20px;\n");
      out.write("            }\n");
      out.write("            .cart-summary {\n");
      out.write("                position: static;\n");
      out.write("            }\n");
      out.write("            .cart-item, .order-item {\n");
      out.write("                flex-direction: column;\n");
      out.write("                text-align: center;\n");
      out.write("                gap: 16px;\n");
      out.write("            }\n");
      out.write("            .product-image, .order-image {\n");
      out.write("                width: 150px;\n");
      out.write("                height: 150px;\n");
      out.write("                margin: 0 auto;\n");
      out.write("            }\n");
      out.write("            .product-details, .order-details {\n");
      out.write("                text-align: center;\n");
      out.write("            }\n");
      out.write("            .quantity-controls {\n");
      out.write("                justify-content: center;\n");
      out.write("            }\n");
      out.write("            .item-actions {\n");
      out.write("                justify-content: center;\n");
      out.write("            }\n");
      out.write("            .stats-grid {\n");
      out.write("                grid-template-columns: repeat(2, 1fr);\n");
      out.write("            }\n");
      out.write("            .order-meta {\n");
      out.write("                justify-content: center;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        /* Loading Animation */\n");
      out.write("        .fade-in {\n");
      out.write("            animation: fadeIn 0.3s ease-in;\n");
      out.write("        }\n");
      out.write("        @keyframes fadeIn {\n");
      out.write("            from { opacity: 0; transform: translateY(10px); }\n");
      out.write("            to { opacity: 1; transform: translateY(0); }\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <!-- Header -->\n");
      out.write("    <nav class=\"navbar\">\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <div class=\"d-flex align-items-center justify-content-between w-100\">\n");
      out.write("                <a class=\"navbar-brand\" href=\"dashboard.jsp\">\n");
      out.write("                    ShopHub\n");
      out.write("                </a>\n");
      out.write("                <div class=\"nav-tools\">\n");
      out.write("                    <a href=\"cart.jsp?view=cart\" class=\"nav-item ");
      out.print( "cart".equals(viewMode) ? "active" : "" );
      out.write(" position-relative\">\n");
      out.write("                        <i class=\"fas fa-shopping-bag\"></i>\n");
      out.write("                        <span class=\"d-none d-md-inline\">Cart</span>\n");
      out.write("                        <span class=\"cart-count\">");
      out.print( cart.size() );
      out.write("</span>\n");
      out.write("                    </a>\n");
      out.write("                    <a href=\"cart.jsp?view=orders\" class=\"nav-item ");
      out.print( "orders".equals(viewMode) ? "active" : "" );
      out.write("\">\n");
      out.write("                        <i class=\"fas fa-truck\"></i>\n");
      out.write("                        <span class=\"d-none d-md-inline\">Orders</span>\n");
      out.write("                    </a>\n");
      out.write("                    <a href=\"dashboard.jsp\" class=\"nav-item\">\n");
      out.write("                        <i class=\"fas fa-home\"></i>\n");
      out.write("                        <span class=\"d-none d-md-inline\">Shop</span>\n");
      out.write("                    </a>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </nav>\n");
      out.write("\n");
      out.write("    <div class=\"main-container\">\n");
      out.write("        <!-- Page Header -->\n");
      out.write("        <div class=\"page-header\">\n");
      out.write("            <nav aria-label=\"breadcrumb\">\n");
      out.write("                <ol class=\"breadcrumb\">\n");
      out.write("                    <li class=\"breadcrumb-item\"><a href=\"dashboard.jsp\">Home</a></li>\n");
      out.write("                    <li class=\"breadcrumb-item active\" aria-current=\"page\">\n");
      out.write("                        ");
      out.print( "orders".equals(viewMode) ? "Order Tracking" : "Shopping Cart" );
      out.write("\n");
      out.write("                    </li>\n");
      out.write("                </ol>\n");
      out.write("            </nav>\n");
      out.write("            <h1 class=\"page-title\">\n");
      out.write("                ");
      out.print( "orders".equals(viewMode) ? "Order Tracking" : "Shopping Cart" );
      out.write("\n");
      out.write("            </h1>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- View Toggle -->\n");
      out.write("        <div class=\"view-toggle fade-in\">\n");
      out.write("            <a href=\"cart.jsp?view=cart\" class=\"toggle-btn ");
      out.print( "cart".equals(viewMode) ? "active" : "" );
      out.write("\">\n");
      out.write("                <i class=\"fas fa-shopping-cart me-2\"></i>Shopping Cart\n");
      out.write("            </a>\n");
      out.write("            <a href=\"cart.jsp?view=orders\" class=\"toggle-btn ");
      out.print( "orders".equals(viewMode) ? "active" : "" );
      out.write("\">\n");
      out.write("                <i class=\"fas fa-truck me-2\"></i>My Orders\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- User Statistics -->\n");
      out.write("        <div class=\"user-stats fade-in\">\n");
      out.write("            <h4><i class=\"fas fa-user me-2\"></i>Welcome back, ");
      out.print( username );
      out.write("!</h4>\n");
      out.write("            <div class=\"stats-grid\">\n");
      out.write("                <div class=\"stat-item\">\n");
      out.write("                    <div class=\"stat-number\">");
      out.print( userTotalOrders );
      out.write("</div>\n");
      out.write("                    <div class=\"stat-label\">Total Orders</div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"stat-item\">\n");
      out.write("                    <div class=\"stat-number\">₹");
      out.print( String.format("%.0f", userTotalSpent) );
      out.write("</div>\n");
      out.write("                    <div class=\"stat-label\">Total Spent</div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"stat-item\">\n");
      out.write("                    <div class=\"stat-number\">");
      out.print( cart.size() );
      out.write("</div>\n");
      out.write("                    <div class=\"stat-label\">Items in Cart</div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"table-info\">\n");
      out.write("                <i class=\"fas fa-database me-1\"></i>\n");
      out.write("                Personal Orders Table: ");
      out.print( userTableName );
      out.write("\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- Orders View -->\n");
      out.write("        ");
 if ("orders".equals(viewMode)) { 
      out.write("\n");
      out.write("            ");
 if (userOrders.isEmpty()) { 
      out.write("\n");
      out.write("                <div class=\"empty-state fade-in\">\n");
      out.write("                    <i class=\"fas fa-truck\"></i>\n");
      out.write("                    <h3>No orders yet</h3>\n");
      out.write("                    <p>You haven't placed any orders yet. Start shopping to see your order history here!</p>\n");
      out.write("                    <a href=\"dashboard.jsp\" class=\"btn-primary\" style=\"width: auto; padding: 12px 32px;\">\n");
      out.write("                        Start Shopping\n");
      out.write("                    </a>\n");
      out.write("                </div>\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                <div class=\"orders-container fade-in\">\n");
      out.write("                    <div class=\"item-count\">\n");
      out.write("                        Order History (");
      out.print( userOrders.size() );
      out.write(" order");
      out.print( userOrders.size() != 1 ? "s" : "" );
      out.write(")\n");
      out.write("                    </div>\n");
      out.write("                    ");
 for (Map<String, Object> order : userOrders) { 
      out.write("\n");
      out.write("                        <div class=\"order-item\">\n");
      out.write("                            <img src=\"");
      out.print( order.get("product_image") != null ? order.get("product_image") : "https://via.placeholder.com/80x80/f7fafc/718096?text=Product" );
      out.write("\"\n");
      out.write("                                  alt=\"");
      out.print( order.get("product_name") );
      out.write("\"\n");
      out.write("                                  class=\"order-image\"\n");
      out.write("                                  onerror=\"this.src='https://via.placeholder.com/80x80/f7fafc/718096?text=Product'\">\n");
      out.write("                                                        \n");
      out.write("                            <div class=\"order-details\">\n");
      out.write("                                <div class=\"order-product-name\">");
      out.print( order.get("product_name") );
      out.write("</div>\n");
      out.write("                                                                \n");
      out.write("                                <div class=\"order-meta\">\n");
      out.write("                                    <span><i class=\"fas fa-calendar\"></i>");
      out.print( new java.text.SimpleDateFormat("MMM dd, yyyy").format((java.util.Date)order.get("order_date")) );
      out.write("</span>\n");
      out.write("                                    <span><i class=\"fas fa-box\"></i>Qty: ");
      out.print( order.get("quantity") );
      out.write("</span>\n");
      out.write("                                    <span><i class=\"fas fa-truck\"></i>\n");
      out.write("                                        ");

                                             java.sql.Date deliveryDate = (java.sql.Date)order.get("estimated_delivery");
                                            if (deliveryDate != null) {
                                        
      out.write("\n");
      out.write("                                            Est. Delivery: ");
      out.print( new java.text.SimpleDateFormat("MMM dd").format(deliveryDate) );
      out.write("\n");
      out.write("                                        ");
 } else { 
      out.write("\n");
      out.write("                                            Est. Delivery: TBD\n");
      out.write("                                        ");
 } 
      out.write("\n");
      out.write("                                    </span>\n");
      out.write("                                </div>\n");
      out.write("                                <div class=\"order-price\">\n");
      out.write("                                    ₹");
      out.print( String.format("%.2f", (Double)order.get("total_amount")) );
      out.write("\n");
      out.write("                                    <span style=\"font-size: 14px; color: #718096; font-weight: 400;\">\n");
      out.write("                                        (₹");
      out.print( String.format("%.2f", (Double)order.get("price")) );
      out.write(" each)\n");
      out.write("                                    </span>\n");
      out.write("                                </div>\n");
      out.write("                                <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px;\">\n");
      out.write("                                    <div class=\"order-status status-");
      out.print( order.get("status") );
      out.write("\">\n");
      out.write("                                        ");

                                             String status = (String)order.get("status");
                                            String statusIcon = "fa-clock";
                                            if ("processing".equals(status)) statusIcon = "fa-cog fa-spin";
                                            else if ("confirmed".equals(status)) statusIcon = "fa-check";
                                            else if ("shipped".equals(status)) statusIcon = "fa-truck";
                                            else if ("delivered".equals(status)) statusIcon = "fa-check-circle";
                                        
      out.write("\n");
      out.write("                                        <i class=\"fas ");
      out.print( statusIcon );
      out.write("\"></i>\n");
      out.write("                                        ");
      out.print( status.toUpperCase() );
      out.write("\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"payment-info payment-");
      out.print( order.get("payment_status") );
      out.write("\">\n");
      out.write("                                        ");

                                            String paymentStatus = (String)order.get("payment_status");
                                            String paymentMethod = (String)order.get("payment_method");
                                            String paymentIcon = "paid".equals(paymentStatus) ? "fa-check-circle" : "fa-clock";
                                        
      out.write("\n");
      out.write("                                        <i class=\"fas ");
      out.print( paymentIcon );
      out.write("\"></i>\n");
      out.write("                                        ");
      out.print( "cod".equals(paymentMethod) ? "COD" : "PAID" );
      out.write("\n");
      out.write("                                    </div>\n");
      out.write("                                </div>\n");
      out.write("                                <div class=\"tracking-section\">\n");
      out.write("                                    <div class=\"tracking-title\">Tracking Information</div>\n");
      out.write("                                    <div class=\"tracking-code\">\n");
      out.write("                                        <strong>Tracking #:</strong> ");
      out.print( order.get("tracking_number") );
      out.write("\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"delivery-estimate\">\n");
      out.write("                                        <i class=\"fas fa-info-circle me-1\"></i>\n");
      out.write("                                        ");
 if ("delivered".equals(status)) { 
      out.write("\n");
      out.write("                                            Package delivered successfully\n");
      out.write("                                        ");
 } else if ("shipped".equals(status)) { 
      out.write("\n");
      out.write("                                            Package is on the way\n");
      out.write("                                        ");
 } else if ("confirmed".equals(status)) { 
      out.write("\n");
      out.write("                                            Order confirmed and being prepared\n");
      out.write("                                        ");
 } else { 
      out.write("\n");
      out.write("                                            Package is being prepared for shipment\n");
      out.write("                                        ");
 } 
      out.write("\n");
      out.write("                                    </div>\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </div>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        ");
 } else { 
      out.write("\n");
      out.write("            <!-- Cart View -->\n");
      out.write("            ");
 if (cartProducts.isEmpty()) { 
      out.write("\n");
      out.write("                <div class=\"empty-state fade-in\">\n");
      out.write("                    <i class=\"fas fa-shopping-cart\"></i>\n");
      out.write("                    <h3>Your cart is empty</h3>\n");
      out.write("                    <p>Looks like you haven't added anything to your cart yet. Start shopping to fill it up!</p>\n");
      out.write("                    <a href=\"dashboard.jsp\" class=\"btn-primary\" style=\"width: auto; padding: 12px 32px;\">\n");
      out.write("                        Start Shopping\n");
      out.write("                    </a>\n");
      out.write("                </div>\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                <!-- Cart Content -->\n");
      out.write("                <div class=\"cart-content\">\n");
      out.write("                    <!-- Cart Items -->\n");
      out.write("                    <div class=\"cart-items fade-in\">\n");
      out.write("                        <div class=\"item-count\">\n");
      out.write("                            Cart Items (");
      out.print( cartProducts.size() );
      out.write(" product");
      out.print( cartProducts.size() != 1 ? "s" : "" );
      out.write(")\n");
      out.write("                        </div>\n");
      out.write("                        ");
 for (Map<String, Object> prod : cartProducts) { 
      out.write("\n");
      out.write("                            <div class=\"cart-item\">\n");
      out.write("                                <img src=\"");
      out.print( prod.get("image_url") );
      out.write("\"\n");
      out.write("                                      alt=\"");
      out.print( prod.get("name") );
      out.write("\"\n");
      out.write("                                      class=\"product-image\"\n");
      out.write("                                      onerror=\"this.src='https://via.placeholder.com/120x120/f7fafc/718096?text=Product'\">\n");
      out.write("                                                                \n");
      out.write("                                <div class=\"product-details\">\n");
      out.write("                                    <a href=\"#\" class=\"product-title\">");
      out.print( prod.get("name") );
      out.write("</a>\n");
      out.write("                                    <div class=\"product-availability\">\n");
      out.write("                                        <i class=\"fas fa-check-circle me-1\"></i>In Stock\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"product-price\">\n");
      out.write("                                        <span class=\"currency\">₹</span>");
      out.print( String.format("%.0f", (Double)prod.get("price")) );
      out.write("\n");
      out.write("                                    </div>\n");
      out.write("                                    <!-- Quantity Controls -->\n");
      out.write("                                    <div class=\"quantity-controls\">\n");
      out.write("                                        <span class=\"quantity-label\">Qty:</span>\n");
      out.write("                                        <form method=\"get\" action=\"cart.jsp\" style=\"display: inline;\">\n");
      out.write("                                            <input type=\"hidden\" name=\"update_quantity_id\" value=\"");
      out.print( prod.get("id") );
      out.write("\">\n");
      out.write("                                            <input type=\"hidden\" name=\"view\" value=\"cart\">\n");
      out.write("                                            <select name=\"new_quantity\" class=\"quantity-selector\" onchange=\"this.form.submit()\">\n");
      out.write("                                                ");

                                                     int currentQty = (Integer) prod.get("quantity");
                                                    for (int i = 1; i <= 10; i++) {
                                                 
      out.write("\n");
      out.write("                                                    <option value=\"");
      out.print( i );
      out.write('"');
      out.write(' ');
      out.print( i == currentQty ? "selected" : "" );
      out.write('>');
      out.print( i );
      out.write("</option>\n");
      out.write("                                                ");
 } 
      out.write("\n");
      out.write("                                            </select>\n");
      out.write("                                        </form>\n");
      out.write("                                    </div>\n");
      out.write("                                    <!-- Action Buttons -->\n");
      out.write("                                    <div class=\"item-actions\">\n");
      out.write("                                        <form method=\"get\" action=\"cart.jsp\" style=\"display: inline;\">\n");
      out.write("                                            <input type=\"hidden\" name=\"remove_from_cart\" value=\"");
      out.print( prod.get("id") );
      out.write("\">\n");
      out.write("                                            <input type=\"hidden\" name=\"view\" value=\"cart\">\n");
      out.write("                                            <button type=\"submit\" class=\"btn-remove\">\n");
      out.write("                                                <i class=\"fas fa-trash me-1\"></i>Remove\n");
      out.write("                                            </button>\n");
      out.write("                                        </form>\n");
      out.write("                                    </div>\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                        ");
 } 
      out.write("\n");
      out.write("                    </div>\n");
      out.write("                    <!-- Cart Summary -->\n");
      out.write("                    <div class=\"cart-summary fade-in\">\n");
      out.write("                        <div class=\"summary-title\">Order Summary</div>\n");
      out.write("                                                \n");
      out.write("                        <div class=\"summary-row\">\n");
      out.write("                            <span>Subtotal (");
      out.print( cart.size() );
      out.write(" items):</span>\n");
      out.write("                            <span>₹");
      out.print( String.format("%.2f", totalAmount) );
      out.write("</span>\n");
      out.write("                        </div>\n");
      out.write("                                                \n");
      out.write("                        <div class=\"summary-row\">\n");
      out.write("                            <span>Shipping:</span>\n");
      out.write("                            <span>Free</span>\n");
      out.write("                        </div>\n");
      out.write("                                                \n");
      out.write("                        <div class=\"summary-row\">\n");
      out.write("                            <span>Tax:</span>\n");
      out.write("                            <span>₹0.00</span>\n");
      out.write("                        </div>\n");
      out.write("                                                \n");
      out.write("                        <div class=\"summary-total\">\n");
      out.write("                            <span>Total:</span>\n");
      out.write("                            <span>₹");
      out.print( String.format("%.2f", totalAmount) );
      out.write("</span>\n");
      out.write("                        </div>\n");
      out.write("                        \n");
      out.write("                        <a href=\"checkout.jsp\" class=\"btn-primary\">\n");
      out.write("                            <i class=\"fas fa-credit-card me-2\"></i>\n");
      out.write("                            Proceed to Checkout\n");
      out.write("                        </a>\n");
      out.write("                                                \n");
      out.write("                        <a href=\"dashboard.jsp\" class=\"btn-secondary\">\n");
      out.write("                            <i class=\"fas fa-arrow-left me-2\"></i>\n");
      out.write("                            Continue Shopping\n");
      out.write("                        </a>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n");
      out.write("    <script>\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("            // Add loading state to remove buttons\n");
      out.write("            const removeForms = document.querySelectorAll('form[method=\"get\"]');\n");
      out.write("            removeForms.forEach(form => {\n");
      out.write("                const removeButton = form.querySelector('.btn-remove');\n");
      out.write("                if (removeButton) {\n");
      out.write("                    form.addEventListener('submit', function(e) {\n");
      out.write("                        removeButton.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i>Removing...';\n");
      out.write("                        removeButton.disabled = true;\n");
      out.write("                    });\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // Add smooth animations\n");
      out.write("            const elements = document.querySelectorAll('.fade-in');\n");
      out.write("            elements.forEach((el, index) => {\n");
      out.write("                el.style.animationDelay = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index * 0.1}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("s`;\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Add some interactive effects\n");
      out.write("        document.querySelectorAll('.cart-item, .order-item').forEach(item => {\n");
      out.write("            item.addEventListener('mouseenter', function() {\n");
      out.write("                this.style.transform = 'translateY(-2px)';\n");
      out.write("                this.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';\n");
      out.write("                this.style.transition = 'all 0.2s ease';\n");
      out.write("            });\n");
      out.write("                        \n");
      out.write("            item.addEventListener('mouseleave', function() {\n");
      out.write("                this.style.transform = 'translateY(0)';\n");
      out.write("                this.style.boxShadow = 'none';\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
