/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.18
 * Generated at: 2025-05-29 10:22:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import jakarta.servlet.http.HttpSession;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("jakarta.servlet.http.HttpSession");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String dbURL = "jdbc:postgresql://localhost:5432/java";
    String dbUser = "postgres";
    String dbPass = "1234";
    String message = "";

    if (request.getMethod().equalsIgnoreCase("POST")) {
        String name = request.getParameter("name");
        String password = request.getParameter("password");
        String loginType = request.getParameter("loginType");

        try {
            Class.forName("org.postgresql.Driver");
            Connection conn = DriverManager.getConnection(dbURL, dbUser, dbPass);

            if ("admin".equals(loginType)) {
                // Admin Login Logic
                
                // Create admin table if not exists
                Statement initStmt = conn.createStatement();
                String createAdminTable = "CREATE TABLE IF NOT EXISTS admin_users (" +
                        "id SERIAL PRIMARY KEY," +
                        "username VARCHAR(255) UNIQUE NOT NULL," +
                        "password VARCHAR(255) NOT NULL," +
                        "full_name VARCHAR(255)," +
                        "email VARCHAR(255)," +
                        "role VARCHAR(50) DEFAULT 'admin'," +
                        "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP," +
                        "last_login TIMESTAMP" +
                        ")";
                initStmt.executeUpdate(createAdminTable);
                
                // Insert default admin if table is empty
                PreparedStatement checkStmt = conn.prepareStatement("SELECT COUNT(*) FROM admin_users");
                ResultSet checkRs = checkStmt.executeQuery();
                checkRs.next();
                if (checkRs.getInt(1) == 0) {
                    PreparedStatement insertStmt = conn.prepareStatement(
                        "INSERT INTO admin_users (username, password, full_name, email) VALUES (?, ?, ?, ?)");
                    insertStmt.setString(1, "admin");
                    insertStmt.setString(2, "admin123");
                    insertStmt.setString(3, "System Administrator");
                    insertStmt.setString(4, "admin@shophub.com");
                    insertStmt.executeUpdate();
                    insertStmt.close();
                }
                checkRs.close();
                checkStmt.close();
                initStmt.close();
                
                // Verify admin credentials
                String adminSql = "SELECT id, full_name, email, role FROM admin_users WHERE username = ? AND password = ?";
                PreparedStatement adminStmt = conn.prepareStatement(adminSql);
                adminStmt.setString(1, name);
                adminStmt.setString(2, password);
                ResultSet adminRs = adminStmt.executeQuery();

                if (adminRs.next()) {
                    // Update last login
                    PreparedStatement updateStmt = conn.prepareStatement(
                        "UPDATE admin_users SET last_login = CURRENT_TIMESTAMP WHERE username = ?");
                    updateStmt.setString(1, name);
                    updateStmt.executeUpdate();
                    updateStmt.close();
                    
                    // Set admin session
                    session.setAttribute("admin_id", adminRs.getInt("id"));
                    session.setAttribute("admin_username", name);
                    session.setAttribute("admin_name", adminRs.getString("full_name"));
                    session.setAttribute("admin_email", adminRs.getString("email"));
                    session.setAttribute("admin_role", adminRs.getString("role"));
                    session.setAttribute("is_admin", true);
                    
                    adminRs.close();
                    adminStmt.close();
                    conn.close();
                    
                    response.sendRedirect("admin-dashboard.jsp");
                    return;
                } else {
                    message = "Invalid admin credentials!";
                }
                
                adminRs.close();
                adminStmt.close();
                
            } else {
                // Regular User Login Logic
                String sql = "SELECT * FROM register WHERE name = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, name);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    String storedPassword = rs.getString("password");

                    if (storedPassword.equals(password)) {
                        session.setAttribute("name", name);
                        session.setAttribute("username", name); // For cart compatibility
                        response.sendRedirect("dashboard.jsp");
                        return;
                    } else {
                        message = "Invalid password!";
                    }
                } else {
                    message = "User not found!";
                }

                rs.close();
                stmt.close();
            }

            conn.close();
        } catch (Exception e) {
            message = "Error: " + e.getMessage();
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Login - ShopHub</title>\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <script type=\"module\" src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js\"></script>\n");
      out.write("    <script nomodule src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js\"></script>\n");
      out.write("    <style>\n");
      out.write("        * {\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            font-family: \"Trebuchet MS\", sans-serif;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        section {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("            min-height: 100vh;\n");
      out.write("            background: url(\"img/aaa.jpg\") no-repeat center/cover;\n");
      out.write("            position: relative;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Fallback background if image doesn't load */\n");
      out.write("        section::before {\n");
      out.write("            content: '';\n");
      out.write("            position: absolute;\n");
      out.write("            top: 0;\n");
      out.write("            left: 0;\n");
      out.write("            right: 0;\n");
      out.write("            bottom: 0;\n");
      out.write("            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n");
      out.write("            z-index: -1;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .form-box {\n");
      out.write("            width: 450px;\n");
      out.write("            background: rgba(255, 255, 255, 0.1);\n");
      out.write("            border: 1px solid #fefefe;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            backdrop-filter: blur(10px) brightness(70%);\n");
      out.write("            padding: 40px;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            position: relative;\n");
      out.write("            animation: slideIn 0.6s ease-out;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @keyframes slideIn {\n");
      out.write("            from {\n");
      out.write("                opacity: 0;\n");
      out.write("                transform: translateY(30px);\n");
      out.write("            }\n");
      out.write("            to {\n");
      out.write("                opacity: 1;\n");
      out.write("                transform: translateY(0);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .form-value {\n");
      out.write("            width: 100%;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        h2 {\n");
      out.write("            text-align: center;\n");
      out.write("            color: #fff;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            font-size: 2em;\n");
      out.write("            font-weight: 600;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Login Type Toggle */\n");
      out.write("        .login-toggle {\n");
      out.write("            display: flex;\n");
      out.write("            background: rgba(255, 255, 255, 0.1);\n");
      out.write("            border-radius: 25px;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            overflow: hidden;\n");
      out.write("            border: 1px solid rgba(255, 255, 255, 0.2);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .toggle-option {\n");
      out.write("            flex: 1;\n");
      out.write("            padding: 12px 20px;\n");
      out.write("            text-align: center;\n");
      out.write("            color: #fff;\n");
      out.write("            cursor: pointer;\n");
      out.write("            transition: all 0.3s ease;\n");
      out.write("            font-weight: 500;\n");
      out.write("            position: relative;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .toggle-option.active {\n");
      out.write("            background: rgba(255, 255, 255, 0.2);\n");
      out.write("            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .toggle-option:hover {\n");
      out.write("            background: rgba(255, 255, 255, 0.15);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .toggle-option ion-icon {\n");
      out.write("            margin-right: 8px;\n");
      out.write("            font-size: 1.1em;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox {\n");
      out.write("            position: relative;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            border-bottom: 2px solid #fff;\n");
      out.write("            transition: border-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox:focus-within {\n");
      out.write("            border-bottom-color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox input {\n");
      out.write("            width: 100%;\n");
      out.write("            height: 50px;\n");
      out.write("            background: transparent;\n");
      out.write("            border: none;\n");
      out.write("            outline: none;\n");
      out.write("            color: #fff;\n");
      out.write("            padding-left: 5px;\n");
      out.write("            font-size: 1em;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox input::placeholder {\n");
      out.write("            color: transparent;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox label {\n");
      out.write("            position: absolute;\n");
      out.write("            top: 50%;\n");
      out.write("            left: 5px;\n");
      out.write("            transform: translateY(-50%);\n");
      out.write("            color: #fff;\n");
      out.write("            pointer-events: none;\n");
      out.write("            transition: 0.3s;\n");
      out.write("            font-size: 1em;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox input:focus ~ label,\n");
      out.write("        .inputbox input:valid ~ label {\n");
      out.write("            top: -5px;\n");
      out.write("            font-size: 0.85em;\n");
      out.write("            color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox ion-icon {\n");
      out.write("            position: absolute;\n");
      out.write("            right: 8px;\n");
      out.write("            top: 20px;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 1.2em;\n");
      out.write("            transition: color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox:focus-within ion-icon {\n");
      out.write("            color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .forget {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            font-size: 0.9em;\n");
      out.write("            color: #fff;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .forget a {\n");
      out.write("            color: #fff;\n");
      out.write("            text-decoration: none;\n");
      out.write("            transition: color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .forget a:hover {\n");
      out.write("            color: #ff6b35;\n");
      out.write("            text-decoration: underline;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button {\n");
      out.write("            width: 100%;\n");
      out.write("            height: 45px;\n");
      out.write("            border-radius: 25px;\n");
      out.write("            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);\n");
      out.write("            border: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-weight: bold;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 1em;\n");
      out.write("            transition: all 0.3s ease;\n");
      out.write("            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:hover {\n");
      out.write("            transform: translateY(-2px);\n");
      out.write("            box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:active {\n");
      out.write("            transform: translateY(0);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .register {\n");
      out.write("            text-align: center;\n");
      out.write("            color: #fff;\n");
      out.write("            margin-top: 25px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .register a {\n");
      out.write("            color: #fff;\n");
      out.write("            text-decoration: none;\n");
      out.write("            font-weight: bold;\n");
      out.write("            transition: color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .register a:hover {\n");
      out.write("            color: #ff6b35;\n");
      out.write("            text-decoration: underline;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .message {\n");
      out.write("            text-align: center;\n");
      out.write("            margin-top: 20px;\n");
      out.write("            padding: 12px;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            font-weight: 500;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .error-message {\n");
      out.write("            background: rgba(220, 53, 69, 0.2);\n");
      out.write("            color: #ff6b6b;\n");
      out.write("            border: 1px solid rgba(220, 53, 69, 0.3);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .success-message {\n");
      out.write("            background: rgba(40, 167, 69, 0.2);\n");
      out.write("            color: #51cf66;\n");
      out.write("            border: 1px solid rgba(40, 167, 69, 0.3);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Admin indicator */\n");
      out.write("        .admin-indicator {\n");
      out.write("            position: absolute;\n");
      out.write("            top: -10px;\n");
      out.write("            right: -10px;\n");
      out.write("            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);\n");
      out.write("            color: white;\n");
      out.write("            padding: 8px 12px;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            font-size: 0.8em;\n");
      out.write("            font-weight: 600;\n");
      out.write("            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);\n");
      out.write("            display: none;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .admin-indicator.show {\n");
      out.write("            display: block;\n");
      out.write("            animation: pulse 2s infinite;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @keyframes pulse {\n");
      out.write("            0%, 100% { transform: scale(1); }\n");
      out.write("            50% { transform: scale(1.05); }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Default credentials info */\n");
      out.write("        .credentials-info {\n");
      out.write("            background: rgba(255, 255, 255, 0.1);\n");
      out.write("            border: 1px solid rgba(255, 255, 255, 0.2);\n");
      out.write("            border-radius: 12px;\n");
      out.write("            padding: 16px;\n");
      out.write("            margin-top: 20px;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 0.85em;\n");
      out.write("            display: none;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .credentials-info.show {\n");
      out.write("            display: block;\n");
      out.write("            animation: fadeIn 0.3s ease-in;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @keyframes fadeIn {\n");
      out.write("            from { opacity: 0; }\n");
      out.write("            to { opacity: 1; }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .credentials-info h6 {\n");
      out.write("            margin-bottom: 8px;\n");
      out.write("            color: #ff6b35;\n");
      out.write("            font-weight: 600;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .credentials-info p {\n");
      out.write("            margin: 4px 0;\n");
      out.write("            opacity: 0.9;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @media screen and (max-width: 480px) {\n");
      out.write("            .form-box {\n");
      out.write("                width: 90%;\n");
      out.write("                padding: 30px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            h2 {\n");
      out.write("                font-size: 1.8em;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .toggle-option {\n");
      out.write("                padding: 10px 15px;\n");
      out.write("                font-size: 0.9em;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<section>\n");
      out.write("    <div class=\"form-box\">\n");
      out.write("        <div class=\"admin-indicator\" id=\"adminIndicator\">\n");
      out.write("            <ion-icon name=\"shield-checkmark\"></ion-icon>\n");
      out.write("            Admin Mode\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <div class=\"form-value\">\n");
      out.write("            <form method=\"post\" id=\"loginForm\">\n");
      out.write("                <h2 id=\"loginTitle\">Login</h2>\n");
      out.write("\n");
      out.write("                <!-- Login Type Toggle -->\n");
      out.write("                <div class=\"login-toggle\">\n");
      out.write("                    <div class=\"toggle-option active\" data-type=\"user\" id=\"userToggle\">\n");
      out.write("                        <ion-icon name=\"person\"></ion-icon>\n");
      out.write("                        User Login\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"toggle-option\" data-type=\"admin\" id=\"adminToggle\">\n");
      out.write("                        <ion-icon name=\"shield-checkmark\"></ion-icon>\n");
      out.write("                        Admin Login\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <input type=\"hidden\" name=\"loginType\" id=\"loginType\" value=\"user\">\n");
      out.write("\n");
      out.write("                <div class=\"inputbox\">\n");
      out.write("                    <ion-icon name=\"person-outline\" id=\"usernameIcon\"></ion-icon>\n");
      out.write("                    <input type=\"text\" name=\"name\" id=\"nameInput\" required>\n");
      out.write("                    <label id=\"usernameLabel\">Username</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"inputbox\">\n");
      out.write("                    <ion-icon name=\"lock-closed-outline\"></ion-icon>\n");
      out.write("                    <input type=\"password\" name=\"password\" required>\n");
      out.write("                    <label>Password</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"forget\">\n");
      out.write("                    <a href=\"#\" id=\"forgotLink\">Forgot Password?</a>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <button type=\"submit\" id=\"submitBtn\">\n");
      out.write("                    <ion-icon name=\"log-in\" style=\"margin-right: 8px;\"></ion-icon>\n");
      out.write("                    Log In\n");
      out.write("                </button>\n");
      out.write("\n");
      out.write("                <div class=\"register\" id=\"registerSection\">\n");
      out.write("                    <p>Don't have an account? <a href=\"register.jsp\">Sign Up</a></p>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <!-- Default Admin Credentials Info -->\n");
      out.write("                <div class=\"credentials-info\" id=\"credentialsInfo\">\n");
      out.write("                    <h6><ion-icon name=\"information-circle\"></ion-icon> Default Admin Credentials</h6>\n");
      out.write("                    <p><strong>Username:</strong> admin</p>\n");
      out.write("                    <p><strong>Password:</strong> admin123</p>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                ");
 if (message != null && !message.isEmpty()) { 
      out.write("\n");
      out.write("                    <div class=\"message ");
      out.print( message.contains("Invalid") || message.contains("Error") ? "error-message" : "success-message" );
      out.write("\">\n");
      out.write("                        <ion-icon name=\"");
      out.print( message.contains("Invalid") || message.contains("Error") ? "alert-circle" : "checkmark-circle" );
      out.write("\"></ion-icon>\n");
      out.write("                        ");
      out.print( message );
      out.write("\n");
      out.write("                    </div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</section>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("        const userToggle = document.getElementById('userToggle');\n");
      out.write("        const adminToggle = document.getElementById('adminToggle');\n");
      out.write("        const loginType = document.getElementById('loginType');\n");
      out.write("        const loginTitle = document.getElementById('loginTitle');\n");
      out.write("        const usernameLabel = document.getElementById('usernameLabel');\n");
      out.write("        const usernameIcon = document.getElementById('usernameIcon');\n");
      out.write("        const submitBtn = document.getElementById('submitBtn');\n");
      out.write("        const registerSection = document.getElementById('registerSection');\n");
      out.write("        const credentialsInfo = document.getElementById('credentialsInfo');\n");
      out.write("        const adminIndicator = document.getElementById('adminIndicator');\n");
      out.write("        const forgotLink = document.getElementById('forgotLink');\n");
      out.write("        const nameInput = document.getElementById('nameInput');\n");
      out.write("\n");
      out.write("        function switchToUser() {\n");
      out.write("            userToggle.classList.add('active');\n");
      out.write("            adminToggle.classList.remove('active');\n");
      out.write("            loginType.value = 'user';\n");
      out.write("            loginTitle.textContent = 'User Login';\n");
      out.write("            usernameLabel.textContent = 'Username';\n");
      out.write("            usernameIcon.name = 'person-outline';\n");
      out.write("            submitBtn.innerHTML = '<ion-icon name=\"log-in\" style=\"margin-right: 8px;\"></ion-icon>Log In';\n");
      out.write("            registerSection.style.display = 'block';\n");
      out.write("            credentialsInfo.classList.remove('show');\n");
      out.write("            adminIndicator.classList.remove('show');\n");
      out.write("            forgotLink.style.display = 'block';\n");
      out.write("            nameInput.value = '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function switchToAdmin() {\n");
      out.write("            adminToggle.classList.add('active');\n");
      out.write("            userToggle.classList.remove('active');\n");
      out.write("            loginType.value = 'admin';\n");
      out.write("            loginTitle.textContent = 'Admin Login';\n");
      out.write("            usernameLabel.textContent = 'Admin Username';\n");
      out.write("            usernameIcon.name = 'shield-checkmark-outline';\n");
      out.write("            submitBtn.innerHTML = '<ion-icon name=\"shield-checkmark\" style=\"margin-right: 8px;\"></ion-icon>Admin Login';\n");
      out.write("            registerSection.style.display = 'none';\n");
      out.write("            credentialsInfo.classList.add('show');\n");
      out.write("            adminIndicator.classList.add('show');\n");
      out.write("            forgotLink.style.display = 'none';\n");
      out.write("            nameInput.value = '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        userToggle.addEventListener('click', switchToUser);\n");
      out.write("        adminToggle.addEventListener('click', switchToAdmin);\n");
      out.write("\n");
      out.write("        // Form submission with loading state\n");
      out.write("        const loginForm = document.getElementById('loginForm');\n");
      out.write("        loginForm.addEventListener('submit', function(e) {\n");
      out.write("            const isAdmin = loginType.value === 'admin';\n");
      out.write("            submitBtn.disabled = true;\n");
      out.write("            submitBtn.innerHTML = `\n");
      out.write("                <ion-icon name=\"hourglass\" style=\"margin-right: 8px; animation: spin 1s linear infinite;\"></ion-icon>\n");
      out.write("                ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${isAdmin ? 'Authenticating Admin...' : 'Logging In...'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\n");
      out.write("            `;\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Auto-fill admin credentials when clicking on credentials info\n");
      out.write("        credentialsInfo.addEventListener('click', function() {\n");
      out.write("            if (loginType.value === 'admin') {\n");
      out.write("                nameInput.value = 'admin';\n");
      out.write("                document.querySelector('input[name=\"password\"]').value = 'admin123';\n");
      out.write("                \n");
      out.write("                // Trigger label animation\n");
      out.write("                nameInput.dispatchEvent(new Event('input'));\n");
      out.write("                document.querySelector('input[name=\"password\"]').dispatchEvent(new Event('input'));\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Add CSS for spin animation\n");
      out.write("        const style = document.createElement('style');\n");
      out.write("        style.textContent = `\n");
      out.write("            @keyframes spin {\n");
      out.write("                from { transform: rotate(0deg); }\n");
      out.write("                to { transform: rotate(360deg); }\n");
      out.write("            }\n");
      out.write("        `;\n");
      out.write("        document.head.appendChild(style);\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
