/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.18
 * Generated at: 2025-05-31 08:03:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String dbURL = "jdbc:postgresql://localhost:5432/java";
    String dbUser = "postgres";
    String dbPass = "1234";

    String message = "";

    if (request.getMethod().equalsIgnoreCase("POST")) {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");

        try {
            Class.forName("org.postgresql.Driver");
            Connection conn = DriverManager.getConnection(dbURL, dbUser, dbPass);
            Statement stmt = conn.createStatement();

            // 1. Create 'register' table
            String createRegisterTable = "CREATE TABLE IF NOT EXISTS register (" +
                    "email VARCHAR(255) PRIMARY KEY," +
                    "name VARCHAR(255) NOT NULL," +
                    "password VARCHAR(255) NOT NULL," +
                    "phone VARCHAR(20)," +
                    "address TEXT)";
            stmt.executeUpdate(createRegisterTable);

            // 2. Insert user data into register table
            String insertUser = "INSERT INTO register (email, name, password, phone, address) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(insertUser);
            pstmt.setString(1, email);
            pstmt.setString(2, name);
            pstmt.setString(3, password);
            pstmt.setString(4, phone);
            pstmt.setString(5, address);
            pstmt.executeUpdate();

            // 3. Create 'user_profile' table (if needed)
            String createUserProfileTable = "CREATE TABLE IF NOT EXISTS user_profile (" +
                    "id SERIAL PRIMARY KEY," +
                    "name VARCHAR(255)," +
                    "email VARCHAR(255)," +
                    "password VARCHAR(255)," +
                    "phone VARCHAR(20)," +
                    "address TEXT," +
                    "profile_picture VARCHAR(255)," +
                    "bio TEXT," +
                    "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)";
            stmt.executeUpdate(createUserProfileTable);

            // 4. Insert into user_profile
            String insertProfile = "INSERT INTO user_profile (name, email, password, phone, address) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement profilePstmt = conn.prepareStatement(insertProfile);
            profilePstmt.setString(1, name);
            profilePstmt.setString(2, email);
            profilePstmt.setString(3, password);
            profilePstmt.setString(4, phone);
            profilePstmt.setString(5, address);
            profilePstmt.executeUpdate();

            message = "Registration successful!";

            pstmt.close();
            profilePstmt.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            if (e.getSQLState().equals("23505")) {
                message = "Email already registered!";
            } else {
                message = "SQL Error: " + e.getMessage();
            }
        } catch (Exception e) {
            message = "Error: " + e.getMessage();
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Register - ShopHub</title>\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <script type=\"module\" src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js\"></script>\n");
      out.write("    <script nomodule src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js\"></script>\n");
      out.write("    <style>\n");
      out.write("        * {\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            font-family: \"Trebuchet MS\", sans-serif;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        section {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("            min-height: 100vh;\n");
      out.write("            background: url(\"img/aaa.jpg\") no-repeat center/cover;\n");
      out.write("            position: relative;\n");
      out.write("            padding: 20px 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Fallback background if image doesn't load */\n");
      out.write("        section::before {\n");
      out.write("            content: '';\n");
      out.write("            position: absolute;\n");
      out.write("            top: 0;\n");
      out.write("            left: 0;\n");
      out.write("            right: 0;\n");
      out.write("            bottom: 0;\n");
      out.write("            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n");
      out.write("            z-index: -1;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .form-box {\n");
      out.write("            width: 500px;\n");
      out.write("            max-width: 90%;\n");
      out.write("            background: rgba(255, 255, 255, 0.1);\n");
      out.write("            border: 1px solid #fefefe;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            backdrop-filter: blur(10px) brightness(70%);\n");
      out.write("            padding: 40px;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            position: relative;\n");
      out.write("            animation: slideIn 0.6s ease-out;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @keyframes slideIn {\n");
      out.write("            from {\n");
      out.write("                opacity: 0;\n");
      out.write("                transform: translateY(30px);\n");
      out.write("            }\n");
      out.write("            to {\n");
      out.write("                opacity: 1;\n");
      out.write("                transform: translateY(0);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .form-value {\n");
      out.write("            width: 100%;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        h2 {\n");
      out.write("            text-align: center;\n");
      out.write("            color: #fff;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            font-size: 2em;\n");
      out.write("            font-weight: 600;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .welcome-text {\n");
      out.write("            text-align: center;\n");
      out.write("            color: rgba(255, 255, 255, 0.9);\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            font-size: 0.95em;\n");
      out.write("            line-height: 1.4;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox {\n");
      out.write("            position: relative;\n");
      out.write("            margin-bottom: 25px;\n");
      out.write("            border-bottom: 2px solid #fff;\n");
      out.write("            transition: border-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox:focus-within {\n");
      out.write("            border-bottom-color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox input {\n");
      out.write("            width: 100%;\n");
      out.write("            height: 50px;\n");
      out.write("            background: transparent;\n");
      out.write("            border: none;\n");
      out.write("            outline: none;\n");
      out.write("            color: #fff;\n");
      out.write("            padding-left: 5px;\n");
      out.write("            font-size: 1em;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox input::placeholder {\n");
      out.write("            color: transparent;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox label {\n");
      out.write("            position: absolute;\n");
      out.write("            top: 50%;\n");
      out.write("            left: 5px;\n");
      out.write("            transform: translateY(-50%);\n");
      out.write("            color: #fff;\n");
      out.write("            pointer-events: none;\n");
      out.write("            transition: 0.3s;\n");
      out.write("            font-size: 1em;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox input:focus ~ label,\n");
      out.write("        .inputbox input:valid ~ label {\n");
      out.write("            top: -5px;\n");
      out.write("            font-size: 0.85em;\n");
      out.write("            color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox ion-icon {\n");
      out.write("            position: absolute;\n");
      out.write("            right: 8px;\n");
      out.write("            top: 20px;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 1.2em;\n");
      out.write("            transition: color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox:focus-within ion-icon {\n");
      out.write("            color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Special styling for textarea-like address field */\n");
      out.write("        .inputbox.address-field {\n");
      out.write("            border-bottom: 2px solid #fff;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            background: rgba(255, 255, 255, 0.05);\n");
      out.write("            padding: 10px;\n");
      out.write("            margin-bottom: 25px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox.address-field input {\n");
      out.write("            height: auto;\n");
      out.write("            min-height: 60px;\n");
      out.write("            padding: 10px 5px;\n");
      out.write("            resize: vertical;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox.address-field label {\n");
      out.write("            top: 15px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox.address-field input:focus ~ label,\n");
      out.write("        .inputbox.address-field input:valid ~ label {\n");
      out.write("            top: -5px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .inputbox.address-field ion-icon {\n");
      out.write("            top: 15px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .terms-checkbox {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            margin-bottom: 25px;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 0.9em;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .terms-checkbox input[type=\"checkbox\"] {\n");
      out.write("            margin-right: 10px;\n");
      out.write("            transform: scale(1.2);\n");
      out.write("            accent-color: #ff6b35;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .terms-checkbox a {\n");
      out.write("            color: #ff6b35;\n");
      out.write("            text-decoration: none;\n");
      out.write("            transition: color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .terms-checkbox a:hover {\n");
      out.write("            color: #fff;\n");
      out.write("            text-decoration: underline;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button {\n");
      out.write("            width: 100%;\n");
      out.write("            height: 45px;\n");
      out.write("            border-radius: 25px;\n");
      out.write("            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);\n");
      out.write("            border: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-weight: bold;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 1em;\n");
      out.write("            transition: all 0.3s ease;\n");
      out.write("            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            justify-content: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:hover {\n");
      out.write("            transform: translateY(-2px);\n");
      out.write("            box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:active {\n");
      out.write("            transform: translateY(0);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:disabled {\n");
      out.write("            opacity: 0.7;\n");
      out.write("            cursor: not-allowed;\n");
      out.write("            transform: none;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .login-link {\n");
      out.write("            text-align: center;\n");
      out.write("            color: #fff;\n");
      out.write("            margin-top: 25px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .login-link a {\n");
      out.write("            color: #fff;\n");
      out.write("            text-decoration: none;\n");
      out.write("            font-weight: bold;\n");
      out.write("            transition: color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .login-link a:hover {\n");
      out.write("            color: #ff6b35;\n");
      out.write("            text-decoration: underline;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .message {\n");
      out.write("            text-align: center;\n");
      out.write("            margin-top: 20px;\n");
      out.write("            padding: 12px;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            font-weight: 500;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .error-message {\n");
      out.write("            background: rgba(220, 53, 69, 0.2);\n");
      out.write("            color: #ff6b6b;\n");
      out.write("            border: 1px solid rgba(220, 53, 69, 0.3);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .success-message {\n");
      out.write("            background: rgba(40, 167, 69, 0.2);\n");
      out.write("            color: #51cf66;\n");
      out.write("            border: 1px solid rgba(40, 167, 69, 0.3);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Password strength indicator */\n");
      out.write("        .password-strength {\n");
      out.write("            margin-top: 5px;\n");
      out.write("            height: 3px;\n");
      out.write("            background: rgba(255, 255, 255, 0.2);\n");
      out.write("            border-radius: 2px;\n");
      out.write("            overflow: hidden;\n");
      out.write("            transition: all 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .password-strength-bar {\n");
      out.write("            height: 100%;\n");
      out.write("            width: 0%;\n");
      out.write("            transition: all 0.3s ease;\n");
      out.write("            border-radius: 2px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .strength-weak { background: #ff4757; width: 25%; }\n");
      out.write("        .strength-fair { background: #ffa502; width: 50%; }\n");
      out.write("        .strength-good { background: #2ed573; width: 75%; }\n");
      out.write("        .strength-strong { background: #1e90ff; width: 100%; }\n");
      out.write("\n");
      out.write("        /* Form steps indicator */\n");
      out.write("        .form-steps {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .step {\n");
      out.write("            width: 30px;\n");
      out.write("            height: 30px;\n");
      out.write("            border-radius: 50%;\n");
      out.write("            background: rgba(255, 255, 255, 0.2);\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            justify-content: center;\n");
      out.write("            margin: 0 5px;\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 0.8em;\n");
      out.write("            font-weight: bold;\n");
      out.write("            transition: all 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .step.active {\n");
      out.write("            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);\n");
      out.write("            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .step.completed {\n");
      out.write("            background: #2ed573;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @media screen and (max-width: 480px) {\n");
      out.write("            .form-box {\n");
      out.write("                width: 95%;\n");
      out.write("                padding: 30px 25px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            h2 {\n");
      out.write("                font-size: 1.8em;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .inputbox {\n");
      out.write("                margin-bottom: 20px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .welcome-text {\n");
      out.write("                font-size: 0.9em;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Loading animation */\n");
      out.write("        @keyframes spin {\n");
      out.write("            from { transform: rotate(0deg); }\n");
      out.write("            to { transform: rotate(360deg); }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .loading {\n");
      out.write("            animation: spin 1s linear infinite;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<section>\n");
      out.write("    <div class=\"form-box\">\n");
      out.write("        <div class=\"form-value\">\n");
      out.write("            <form method=\"post\" id=\"registerForm\">\n");
      out.write("                <h2>Create Account</h2>\n");
      out.write("                <p class=\"welcome-text\">Join ShopHub today and discover amazing products!</p>\n");
      out.write("\n");
      out.write("                <div class=\"form-steps\">\n");
      out.write("                    <div class=\"step active\">1</div>\n");
      out.write("                    <div class=\"step\">2</div>\n");
      out.write("                    <div class=\"step\">3</div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"inputbox\">\n");
      out.write("                    <ion-icon name=\"person-outline\"></ion-icon>\n");
      out.write("                    <input type=\"text\" name=\"name\" id=\"nameInput\" required>\n");
      out.write("                    <label>Full Name</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"inputbox\">\n");
      out.write("                    <ion-icon name=\"mail-outline\"></ion-icon>\n");
      out.write("                    <input type=\"email\" name=\"email\" id=\"emailInput\" required>\n");
      out.write("                    <label>Email Address</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"inputbox\">\n");
      out.write("                    <ion-icon name=\"lock-closed-outline\"></ion-icon>\n");
      out.write("                    <input type=\"password\" name=\"password\" id=\"passwordInput\" required>\n");
      out.write("                    <label>Password</label>\n");
      out.write("                    <div class=\"password-strength\">\n");
      out.write("                        <div class=\"password-strength-bar\" id=\"strengthBar\"></div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"inputbox\">\n");
      out.write("                    <ion-icon name=\"call-outline\"></ion-icon>\n");
      out.write("                    <input type=\"tel\" name=\"phone\" id=\"phoneInput\" pattern=\"[0-9]{10}\" title=\"Please enter exactly 10 digits (e.g., 1234567890)\" required>\n");
      out.write("                    <label>Phone Number</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"inputbox address-field\">\n");
      out.write("                    <ion-icon name=\"location-outline\"></ion-icon>\n");
      out.write("                    <input type=\"text\" name=\"address\" id=\"addressInput\" required>\n");
      out.write("                    <label>Address</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"terms-checkbox\">\n");
      out.write("                    <input type=\"checkbox\" id=\"termsCheck\" required>\n");
      out.write("                    <label for=\"termsCheck\">\n");
      out.write("                        I agree to the <a href=\"#\" target=\"_blank\">Terms & Conditions</a> and <a href=\"#\" target=\"_blank\">Privacy Policy</a>\n");
      out.write("                    </label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <button type=\"submit\" id=\"submitBtn\">\n");
      out.write("                    <ion-icon name=\"person-add\" style=\"margin-right: 8px;\"></ion-icon>\n");
      out.write("                    Create Account\n");
      out.write("                </button>\n");
      out.write("\n");
      out.write("                <div class=\"login-link\">\n");
      out.write("                    <p>Already have an account? <a href=\"login.jsp\">Sign In</a></p>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                ");
 if (message != null && !message.isEmpty()) { 
      out.write("\n");
      out.write("                    <div class=\"message ");
      out.print( message.contains("successful") ? "success-message" : "error-message" );
      out.write("\">\n");
      out.write("                        <ion-icon name=\"");
      out.print( message.contains("successful") ? "checkmark-circle" : "alert-circle" );
      out.write("\"></ion-icon>\n");
      out.write("                        ");
      out.print( message );
      out.write("\n");
      out.write("                    </div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</section>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("        const form = document.getElementById('registerForm');\n");
      out.write("        const submitBtn = document.getElementById('submitBtn');\n");
      out.write("        const passwordInput = document.getElementById('passwordInput');\n");
      out.write("        const strengthBar = document.getElementById('strengthBar');\n");
      out.write("        const steps = document.querySelectorAll('.step');\n");
      out.write("        const inputs = document.querySelectorAll('input[required]');\n");
      out.write("\n");
      out.write("        // Password strength checker\n");
      out.write("        passwordInput.addEventListener('input', function() {\n");
      out.write("            const password = this.value;\n");
      out.write("            let strength = 0;\n");
      out.write("            \n");
      out.write("            if (password.length >= 8) strength++;\n");
      out.write("            if (/[a-z]/.test(password)) strength++;\n");
      out.write("            if (/[A-Z]/.test(password)) strength++;\n");
      out.write("            if (/[0-9]/.test(password)) strength++;\n");
      out.write("            if (/[^A-Za-z0-9]/.test(password)) strength++;\n");
      out.write("\n");
      out.write("            strengthBar.className = 'password-strength-bar';\n");
      out.write("            \n");
      out.write("            if (strength === 0) {\n");
      out.write("                strengthBar.classList.add('strength-weak');\n");
      out.write("            } else if (strength <= 2) {\n");
      out.write("                strengthBar.classList.add('strength-weak');\n");
      out.write("            } else if (strength === 3) {\n");
      out.write("                strengthBar.classList.add('strength-fair');\n");
      out.write("            } else if (strength === 4) {\n");
      out.write("                strengthBar.classList.add('strength-good');\n");
      out.write("            } else {\n");
      out.write("                strengthBar.classList.add('strength-strong');\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Form progress tracking\n");
      out.write("        function updateProgress() {\n");
      out.write("            let filledInputs = 0;\n");
      out.write("            inputs.forEach(input => {\n");
      out.write("                if (input.value.trim() !== '' && input.checkValidity()) {\n");
      out.write("                    filledInputs++;\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            const progress = Math.ceil((filledInputs / inputs.length) * 3);\n");
      out.write("            \n");
      out.write("            steps.forEach((step, index) => {\n");
      out.write("                step.classList.remove('active', 'completed');\n");
      out.write("                if (index < progress - 1) {\n");
      out.write("                    step.classList.add('completed');\n");
      out.write("                } else if (index === progress - 1) {\n");
      out.write("                    step.classList.add('active');\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        inputs.forEach(input => {\n");
      out.write("            input.addEventListener('input', updateProgress);\n");
      out.write("            input.addEventListener('blur', updateProgress);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Form submission with loading state\n");
      out.write("        form.addEventListener('submit', function(e) {\n");
      out.write("            submitBtn.disabled = true;\n");
      out.write("            submitBtn.innerHTML = `\n");
      out.write("                <ion-icon name=\"hourglass\" class=\"loading\" style=\"margin-right: 8px;\"></ion-icon>\n");
      out.write("                Creating Account...\n");
      out.write("            `;\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Email validation\n");
      out.write("        const emailInput = document.getElementById('emailInput');\n");
      out.write("        emailInput.addEventListener('blur', function() {\n");
      out.write("            const email = this.value;\n");
      out.write("            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n");
      out.write("            \n");
      out.write("            if (email && !emailRegex.test(email)) {\n");
      out.write("                this.setCustomValidity('Please enter a valid email address');\n");
      out.write("            } else {\n");
      out.write("                this.setCustomValidity('');\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Phone number input for 10-digit numbers only (no formatting)\n");
      out.write("        const phoneInput = document.getElementById('phoneInput');\n");
      out.write("        phoneInput.addEventListener('input', function() {\n");
      out.write("            let value = this.value.replace(/\\D/g, '');\n");
      out.write("            \n");
      out.write("            // Limit to 10 digits\n");
      out.write("            if (value.length > 10) {\n");
      out.write("                value = value.substring(0, 10);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            this.value = value;\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Add validation for exactly 10 digits\n");
      out.write("        phoneInput.addEventListener('blur', function() {\n");
      out.write("            const phoneDigits = this.value;\n");
      out.write("            \n");
      out.write("            if (phoneDigits.length > 0 && phoneDigits.length !== 10) {\n");
      out.write("                this.setCustomValidity('Phone number must be exactly 10 digits');\n");
      out.write("            } else {\n");
      out.write("                this.setCustomValidity('');\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Auto-focus next field on Enter\n");
      out.write("        inputs.forEach((input, index) => {\n");
      out.write("            input.addEventListener('keypress', function(e) {\n");
      out.write("                if (e.key === 'Enter' && index < inputs.length - 1) {\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    inputs[index + 1].focus();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Initial progress update\n");
      out.write("        updateProgress();\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
